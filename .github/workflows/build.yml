name: Generate Documentation

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up yq and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          wget https://github.com/mikefarah/yq/releases/download/v4.15.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          
      - name: Create directories
        run: |
          mkdir -p tmp
          mkdir -p output
          
      - name: Load and merge hot IDs
        id: load_hot_ids
        run: |
          if [ -n "${{ secrets.SECRET_SORT }}" ]; then
            IFS=',' read -ra SORT_FILES <<< "${{ secrets.SECRET_SORT }}"
            HOT_IDS="[]"
            for SORT in "${SORT_FILES[@]}"; do
              FILE_PATH="docs/${SORT}.yml"
              if [ -f "$FILE_PATH" ]; then
                ID=$(yq eval '.id' "$FILE_PATH" 2>/dev/null)
                
                if [ -z "$ID" ] || [ "$ID" = "null" ]; then
                  echo "Error: ID is missing or null in $FILE_PATH"
                  exit 1
                fi
                
                HOT_IDS=$(jq --arg id "$ID" '. + [$id]' <<< "$HOT_IDS")
              else
                echo "Warning: File $FILE_PATH does not exist."
              fi
            done
            
            echo "hots=$(echo $HOT_IDS | jq -c .)" >> $GITHUB_OUTPUT
          else
            echo "SECRET_SORT is empty, initializing empty hots"
            echo "hots=[]" >> $GITHUB_OUTPUT
          fi

      - name: Create all.json
        run: |
          if [ $(ls docs/*.yml 2>/dev/null | wc -l) -gt 0 ]; then
            mkdir -p tmp/items
            
            for file in docs/*.yml; do
              filename=$(basename "$file" .yml)
              
              yq eval -o=json "$file" > "tmp/items/${filename}.json"
              
              if ! jq -e '.id' "tmp/items/${filename}.json" > /dev/null; then
                echo "Error: ID is missing in $file"
                exit 1
              fi
            done
            
            jq -s 'sort_by(.id)' tmp/items/*.json > output/all.json
          else
            echo '[]' > output/all.json
          fi
          
      - name: Debug hots output
        run: |
          echo "HOTS value: ${{ steps.load_hot_ids.outputs.hots }}"
          echo "${{ steps.load_hot_ids.outputs.hots }}" | jq . || true
          
      - name: Process and combine data
        run: |
          HOT_IDS="${{ steps.load_hot_ids.outputs.hots }}"
          
          jq --argjson hots "$HOT_IDS" \
             '{
                hots: $hots,
                items: .
              }' \
             output/all.json > output/combined.json
             
      - name: Debug combined.json
        run: |
          echo "===== combined.json content ====="
          cat output/combined.json | jq . || true
             
      - name: Convert JSON to YAML
        run: |
          yq eval -P -o=yaml output/combined.json > output/combined.yaml

      - name: Add index.html
        run: |
          echo '<!DOCTYPE html>
          <html>
          <head>
            <title>Documentation</title>
            <meta http-equiv="refresh" content="0; url=combined.yaml">
          </head>
          <body>
            <p>Redirecting to <a href="combined.yaml">combined.yaml</a></p>
          </body>
          </html>' > output/index.html

      - name: prepare_site
        run: |
          mkdir site
          cp output/combined.json site/
          cp output/combined.yaml site/
          cp output/index.html site/

      - name: upload_pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - id: deploy
        uses: actions/deploy-pages@v4